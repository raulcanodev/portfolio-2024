const id = "wordpress-custom-field-to-query-by-weekly-views.md";
						const collection = "blog";
						const slug = "wordpress-custom-field-to-query-by-weekly-views";
						const body = "WordPress allows you to create new meta_keys for your posts. This is useful when\r\nyou want to store additional information about your posts. \r\n\r\nBy the other hand the [WordPress CRON event](https://developer.wordpress.org/plugins/cron/scheduling-wp-cron-events/) allows you to schedule events to run at specific times. In this case, we will use it to reset the daily views counter every day, store the daily views in a weekly array, and calculate the total weekly views.\r\n\r\n---\r\n\r\n## 1. Add a New Custom Field to Store Daily Views\r\n\r\nWe can add a new custom field in different ways. Without code by using the plugin ACF (Advanced Custom Fields) or with code. In this case, we will use code.\r\n\r\nTo add a new custom field, WordPress provides the [add_post_meta()](https://developer.wordpress.org/reference/functions/add_post_meta/) and [update_post_meta()](https://developer.wordpress.org/reference/functions/update_post_meta/) functions. It's not necessary to use the first one because update_post_meta() will add the custom field if it doesn't exist.\r\n\r\n### Code for `single.php`\r\n\r\n```php title=\"single.php\"\r\n<?php while (have_posts()) : the_post(); ?>\r\n\r\n  <?php\r\n  // Get the post ID and increment the daily views counter\r\n  $post_id = get_the_ID(); // Get the post ID from the loop \r\n  $daily_views = get_post_meta($post_id, 'daily_views', true);\r\n  $daily_views = $daily_views ? $daily_views + 1 : 1;\r\n\r\n  update_post_meta($post_id, 'daily_views', $daily_views);\r\n  ?>\r\n\r\n  ...Your post content\r\n\r\n<?php endwhile; ?>\r\n```\r\n\r\nBy doing so, we can see in the database that the custom field `daily_views` has been added to the post. Inside the postmeta table\r\n\r\n\r\n## 2. Create CRON event to reset the daily views counter every day\r\n\r\nTo reset the daily views counter every day, we can use the WordPress CRON event. We will create a new function in `functions.php` to reset the daily views counter for all posts.\r\n\r\n### Code for `functions.php`\r\n\r\n```php title=\"most-viewed.php\"\r\nfunction reset_daily_views()\r\n{\r\n\t$args = array(\r\n\t\t'post_type'      => 'post',\r\n\t\t'posts_per_page' => -1,\r\n\t\t'post_status'    => 'publish',\r\n\t);\r\n\r\n\t$posts = new WP_Query($args);\r\n\r\n\tif ($posts->have_posts()) {\r\n\t\twhile ($posts->have_posts()) {\r\n\t\t\t$posts->the_post();\r\n\t\t\tdelete_post_meta(get_the_ID(), 'daily_views'); // Delete the daily views counter\r\n\t\t}\r\n\t}\r\n\twp_reset_postdata();\r\n}\r\n\r\nif (!wp_next_scheduled('reset_daily_views_hook')) {\r\n\twp_schedule_event(time(), 'daily', 'reset_daily_views_hook');\r\n}\r\n\r\nadd_action('reset_daily_views_hook', 'reset_daily_views');\r\n```\r\n\r\n## 3. Add a New Custom Field to Store Weekly Views With a CRON Event\r\n\r\nWe will create a new function in `functions.php` to store the daily views in a weekly array. This function will be executed every day to store the daily views in the `weekly_views` custom field.\r\n\r\n```php title=\"functions.php\"\r\nfunction add_day_to_week()\r\n{\r\n\t$args = array(\r\n\t\t'post_type'      => 'post',\r\n\t\t'posts_per_page' => -1,\r\n\t\t'post_status'    => 'publish',\r\n\t);\r\n\r\n\t$posts = new WP_Query($args);\r\n\r\n\tif ($posts->have_posts()) {\r\n\t\twhile ($posts->have_posts()) {\r\n\t\t\t$posts->the_post();\r\n\r\n\t\t\t$daily_views = get_post_meta(get_the_ID(), 'daily_views', true);  // Comes from single.php\r\n\t\t\t$weekly_views = get_post_meta(get_the_ID(), 'weekly_views', true);\r\n\r\n\t\t\tif (!is_array($weekly_views)) {\r\n\t\t\t\t$weekly_views = array();\r\n\t\t\t}\r\n\r\n\t\t\tif (count($weekly_views) >= 7) {\r\n\t\t\t\tarray_shift($weekly_views);\r\n\t\t\t}\r\n\r\n\t\t\t$weekly_views[] = $daily_views;\r\n\r\n\t\t\tupdate_post_meta(get_the_ID(), 'weekly_views', $weekly_views);\r\n\t\t}\r\n\t}\r\n\twp_reset_postdata();\r\n}\r\n\r\nif (!wp_next_scheduled('add_day_to_week_hook')) {\r\n\twp_schedule_event(time(), 'daily', 'add_day_to_week_hook');\r\n}\r\n\r\nadd_action('add_day_to_week_hook', 'add_day_to_week');\r\n```\r\n\r\n## 4. Add a New Custom Field to Store The Total Views During The Week\r\n\r\nThis is a simple sum of the `weekly_views` array. We will create a new function in `functions.php` to store the total weekly views for all posts.\r\n\r\n```php title=\"functions.php\"\r\n\r\nfunction total_weekly_views()\r\n{\r\n\t$args = array(\r\n\t\t'post_type'      => 'post',\r\n\t\t'posts_per_page' => -1,\r\n\t\t'post_status'    => 'publish',\r\n\t);\r\n\r\n\t$posts = new WP_Query($args);\r\n\r\n\tif ($posts->have_posts()) {\r\n\t\twhile ($posts->have_posts()) {\r\n\t\t\t$posts->the_post();\r\n\r\n\t\t\t$weekly_views = get_post_meta(get_the_ID(), 'weekly_views', true);\r\n\r\n\t\t\tif (!is_array($weekly_views)) {\r\n\t\t\t\t$weekly_views = array();\r\n\t\t\t}\r\n\r\n\t\t\t$total_weekly_views = array_sum($weekly_views);\r\n\r\n\t\t\tupdate_post_meta(get_the_ID(), 'total_weekly_views', $total_weekly_views);\r\n\t\t}\r\n\t}\r\n\twp_reset_postdata();\r\n}\r\n\r\nif (!wp_next_scheduled('total_weekly_views_hook')) {\r\n\twp_schedule_event(time(), 'daily', 'total_weekly_views_hook');\r\n}\r\n\r\nadd_action('total_weekly_views_hook', 'total_weekly_views');\r\n```\r\n\r\n## 5. Query Posts by Weekly Views\r\n\r\nNow that we have the `total_weekly_views` custom field, we can query the posts by weekly views. We will create a new file called `most-viewed.php` to query the posts by weekly views.\r\n\r\n```php title=\"most-viewed.php\"\r\n<?php\r\n$args = array(\r\n  'post_type'      => 'post',\r\n  'posts_per_page' => 5,\r\n  'meta_key'       => 'total_weekly_views',\r\n  'orderby'        => 'meta_value_num',\r\n  'order'          => 'DESC',\r\n);\r\n\r\n$query = new WP_Query($args);\r\n?>\r\n```\r\n\r\nThis code will return the `$query` we can use to loop through the posts.\r\n\r\n```php title=\"index.php\"\r\n<?php require_once('most-viewed.php'); ?>\r\n// This returns the $query we can use to loop through the posts\r\n...Filter the loop\r\n```\r\n\r\n## How To Test The CRON Events\r\nTo test the CRON events you can use the [WP Crontrol](https://wordpress.org/plugins/wp-crontrol/) plugin. This plugin allows you to view and control what's happening in the WP-Cron system.\r\n\r\nThen you can simulate the CRON events by clicking on the \"Run Now\" button.\r\n\r\n## Conclusion\r\n\r\nThere are of course many ways to achieve this. This is just one of them. You can use this as a base and improve it according to your needs. \r\n\r\nHope this helps you to filter posts by weekly views in WordPress without external plugins.\r\n";
						const data = {title:"Add New Custom Field and Query by Weekly Views in WordPress",summary:"How can I filter posts by weekly views in WordPress? In this article, we will show you how to add a new custom field to your WordPress posts and query them by the total views of the week.",pubDate:new Date(1720396800000),emoji:"ðŸ’»",author:"Raul Cano",linkAuthor:"https://x.com/raulcanodev",image:"/thumbnails/wordpress.webp",tags:["wordpress","php"],slug:"wordpress-custom-field-to-query-by-weekly-views",category:"WordPress"};
						const _internal = {
							type: 'content',
							filePath: "/Users/rawraul/Dev/raul-cano/portfolio-2024/src/content/blog/wordpress-custom-field-to-query-by-weekly-views.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
